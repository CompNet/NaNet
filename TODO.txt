Static graph extraction
	- Extract one graph for each volume
      Plot a pannel of these volumes (for a given series)
	- For each narrative arc?

Dynamic network extraction
   - Implement window-based approach (<< isn't this already done?)
   - Implement narrative smoothing
	 - (test on the toy example)

Topological measures
	- include the harmonic closeness (leverage Trajan code)

Stats part:
- Goal: study the effect of the extraction parameters
	- window size
	- overlap
	- extraction method
- Methods:
	- standard topological measures:
		- how they evolve with the parameters
		- for nodal measures, we could study how they are rank-correlated (for 2 different parameter values)
		  (in addition to studying changes in absolute value)
	- also consider global similarity measures between graphs
	- Identify which nodal measures are used in apps of char nets (in the literature)
	  >> study how these are affected by extraction parameters
	- assess the difference between parameters on a simple task such as story segmentation (ref=segments or volumes?)
	  >> maybe in a different paper

- Segments: weights=occurrences vs. durations
  - compare them, are they correlated?

- Plots:
  - Plots combining the different assortativities / centralizations ? (for comparison purposes. not sure of the interest)*
  - Check the violin plots
  
- Segmentation task: 
  - requires dynamic nets
  - maybe do that in a separate paper
- This first work:
  - descriptive study of the segment-based networks
  - compare with other fictional character networks properties
  - assess window-based approaches as approximations
    - compare how good the window corresponding to the typical segment length is
  - study the effect on some simple tools from the literature 
    (eg main character detection through combination of centrality measures)

Method to compare between bédés
  - just compare segment-based graphs (through their topological measures)
    >> can be done through tables (?)
  - also compare to other types of character networks
  - compare the best window-based parameters

Plot comparison  
  - Compare nets extracted from one-shot albums (e.g. Astérix): 
    can we find archetypical roles coming back in each album?
    >> need a way to find narratively equivalent characters (nodes) from album to album
  - We'll probably need to perform some kind of alignment task at some point

Changes:
  - remove links whose weight is under some threshold (e.g. determined from some stat computed over the whole node/link set)
    >> OK for the segments, but how to do that for the window-based nets?
  - plot centrality changes over only the top k most central nodes
    (don't we care about the other characters?)
  - in plots: use violins rather than boxplots

  
------------
Warning messages:
1: In closeness(graph = graph, mode = "all", weights = NA,  ... :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
2: In closeness(graph = graph, mode = "all", weights = NA,  ... :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
3: In closeness(graph = graph, mode = "all", weights = E(graph)$weight,  ... :
  At centrality.c:2617 :closeness centrality is not well-defined for disconnected graphs
4: In closeness(graph = graph, mode = "all", weights = E(graph)$weight,  ... :
  At centrality.c:2617 :closeness centrality is not well-defined for disconnected graphs
5: closing unused connection 10 (<-acdid.acdsystems.com:11566)
6: closing unused connection 9 (<-acdid.acdsystems.com:11566)
7: closing unused connection 8 (<-acdid.acdsystems.com:11566)
8: closing unused connection 7 (<-acdid.acdsystems.com:11566)
9: In centr_clo(graph = graph, mode = "all", normalized = FALSE) :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
10: In centr_clo(graph = graph, mode = "all", normalized = TRUE) :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
11: In closeness(graph = graph, mode = "all", weights = NA,  ... :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
12: In closeness(graph = graph, mode = "all", weights = NA,  ... :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
13: In closeness(graph = graph, mode = "all", weights = E(graph)$weight,  ... :
  At centrality.c:2617 :closeness centrality is not well-defined for disconnected graphs
14: In closeness(graph = graph, mode = "all", weights = E(graph)$weight,  ... :
  At centrality.c:2617 :closeness centrality is not well-defined for disconnected graphs
15: In centr_clo(graph = graph, mode = "all", normalized = FALSE) :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
16: In centr_clo(graph = graph, mode = "all", normalized = TRUE) :
  At centrality.c:2784 :closeness centrality is not well-defined for disconnected graphs
17: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
18: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
19: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
20: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
21: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
22: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
23: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
24: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
25: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
26: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
27: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
28: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
29: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
30: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
31: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
32: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
33: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
34: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
35: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
36: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
37: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
38: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
39: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
40: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
41: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
42: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
43: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
44: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
45: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
46: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
47: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
48: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
49: In cor.test.default(x = vals.dur, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
50: In cor.test.default(x = vals.occ, y = vals.cur, method = "spearman") :
  Cannot compute exact p-value with ties
>